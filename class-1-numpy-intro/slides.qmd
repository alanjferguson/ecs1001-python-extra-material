---
title: Intro to NumPy
author: Dr Alan Ferguson
date: 2024-10-11
format: revealjs
execute:
    echo: true
    cache: true
---

## Objectives

- Understand purpose and advantages of using NumPy.
- Perform basic array operations in NumPy:
    - creation
    - indexing
    - slicing
    - basic computations

## What is NumPy?

- Open-source Python library for scientific computing
- Used for working with multi-dimensional *arrays* (which are more efficient than native Python lists)
- Essential for solving engineering tasks using Python, e.g.:
    - signal processing (*SciPy*)
    - machine learning (*scikit-learn*)
    - data science (*Pandas*)

![](../assets/numpylogo.png){height=100}

## Why use NumPy?

- Efficient array operations (faster than Python lists due to better memory usage)
- Able to handle large datasets
- Supports mathematical operations directly on arrays

E.g. Compute the sine of the first 10,000 integers  

. . .

**Python Lists**

```{python}
%%timeit
import math

sines = []
for i in range(10000):
    angle = i / (2.0 * math.pi)
    sines.append(math.sin(angle))
```

. . . 

**Numpy Arrays**

```{python}
%%timeit
import numpy as np

angles = np.arange(10000) / (2.0 * np.pi)
sines = np.sin(angles)
```

# Numpy Basics

## How to install NumPy

```{.bash}
pip install numpy
```


## How to import NumPy

```{python}
import numpy as np
```

*NOTE:* typically shortened to `np`

## Creating arrays

1. Using lists to create arrays:
```{.python}
arr = np.array([1, 2, 3])
```

. . .

2. Use functions to generate arrays:

::: fragment
- Filled with zeros

```{.python}
arr = np.zeros(3)  # array([0., 0., 0. ])
```
:::

::: fragment
- Filled with ones

```{.python}
arr = np.ones(3)   # array([1., 1., 1. ])
```
:::

::: fragment
- Evenly spaced values in interval

```{python}
arr = np.arange(3) # array([0, 1, 2])
arr = np.arange(1,3) # array([1, 2])
arr = np.arange(1, 6, 2) # array([1, 3, 5])
```

Equivalent to Python `range()` for ints
:::

## Array Dimensions and Shapes

- Number of axes of an array is called its dimension, e.g.:
    - 1-D array has 1 axis, $\begin{bmatrix}0& 1& 2\end{bmatrix}$
    - 2-D array has 2 axes, $\begin{bmatrix}1 & 2\\ 3 & 4\end{bmatrix}$ or $\begin{bmatrix}0 & 1 & 2 & 3\\ 4 & 5 & 6 & 7\end{bmatrix}$

. . .

- The lengths of all the dimensions is called the shape of the array, e.g.:
    - $\begin{bmatrix}0& 1& 2\end{bmatrix}$ has shape (3,), i.e. 3 elements
    - $\begin{bmatrix}1 & 2\\ 3 & 4\end{bmatrix}$ has shape (2, 2), i.e. 2 rows and 2 columns
    - $\begin{bmatrix}0 & 1 & 2 & 3\\ 4 & 5 & 6 & 7\end{bmatrix}$ has shape (2, 4), i.e. 2 rows and 2 columns

. . .

#### 0-D (Scalars)

```{python}
val = np.array(42)
print(val)
print(val.shape)
```

#### 1-D (Vectors)

```{python}
vec = np.array([1, 2, 3])
print(vec)
print(vec.shape)
```

#### 2-D (Matrices)

```{python}
mat = np.array([[1, 2], [3, 4]])
print(f"{mat=}")
print(f"{mat.shape=}")
print()

mat = np.array([[0, 1, 2, 3], [4, 5, 6, 7]])
print(f"{mat=}")
print(f"{mat.shape=}")
```

## Basic Operations

- Can perform elementwise addition, multiplication, etc.:
```{python}
a = np.array([1, 2, 3])
print(f"{a=}")
b = 2  * (a + 1)
print(f"{b=}")
```

. . .

- Also supports most mathematical functions, e.g.:
```{python}
a = np.array([1, 2, 3, 4, 5])
mean = np.mean(a)
std = np.std(a)
print(f"{mean=}")
print(f"{std=}")
```

- [https://numpy.org/doc/stable/reference/]()

## Indexing and slicing

- Can access elements via indices
```{python}
a = np.arange(6)
a[0], a[2], a[-1]
```

- or as slices:
```{python}
a[1:3], a[::-1]
```

. . .

- Slices are denoted by `start:end:step`, where:
    - `start` is the first index inside the slice
    - `end` is the first index AFTER the slice
    - `step` is increment of index between elements of slice
- Also have the empty slice `:` which extracts all of that dimension
- Also supports negative indices

. . .

- Using indexing and slices, we can modify parts of the array, e.g.:
```{python}
arr = np.zeros((3, 3))
arr[(0, 0)] = 1 # make first element of first row 1
arr[(-1, -1)] = 100 # make last element of last row 100

arr[0,:] += 1
arr[1, 1:3] = [10, 20]

print(arr)
```

# Exercise


## Objective

Simulate and analyse a basic time-series signal by generating data points, manipulating the data, and perform simple operations using NumPy

## Task

Simulate a time-series signal, representing a noisy sine wave, and perform basic analysis on this:

- Step 1: Create timesteps 
- Step 2: Generate sine wave
- Step 3: Add noise
- Step 4: Basic analysis (mean/std/min/max)
- Step 5: Extract segment from 2s to 4s and calculate mean
- Step 6: Smooth signal
- Step 7: Plot signal